#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM CLUSTER.dclst
-v: verbose
";

autoflush STDOUT;

my %OPT;
getopts('v', \%OPT);

### Settings
my @TAXON_RANK = ("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus");
my @FUNCTION_CATEGORY = ("MBGD", "COG", "KEGG", "TIGR");

### Preparation
if (@ARGV != 1) {
    print STDERR $USAGE;
    exit 1;
}
my $INPUT = shift @ARGV;
if (! -e $INPUT) {
    die;
}

print_log("Preparation");
my $CLUSTER = "cluster";
if ($INPUT =~ /\.dclst$/) {
    # some domain might be skipped, thus, re-number domains to be adjacent, and assing 0 for unsplit domains
    exec_and_save("dclst2tsv $INPUT | dom_renumber -d | sort", $CLUSTER);
    # if (! -s $CLUSTER) {
    # 	system "cat $INPUT | domrefine.dclst_to_files.pl";
    # 	system "cat cluster | dom_renumber -d | sort > $CLUSTER";
    # }
} else {
    exec_command("ln -s $INPUT $CLUSTER");
}

### Basic information
print_log("Basic information");
mkdir_with_check("basic_info");

my $CLUSTER_DESCR = "basic_info/cluster.descr";
my $CLUSTER_SIZE = "basic_info/cluster.size";
my $CLUSTER_SP_NUM = "basic_info/cluster.sp_num";
my $CLUSTER_GENE_NUM = "basic_info/cluster.gene_num";
my $CLUSTER_PARALOG_NUM = "basic_info/cluster.paralog_num";
my $SP = "basic_info/sp";
my $GENE_NUM = "basic_info/sp.gene_num";
my $SP_SPLIT_GENE = "basic_info/sp.split_gene_freq_ratio";
my $DOMAIN_FREQ = "basic_info/sp.domain_freq";
my $DOMAIN_SPLIT_FREQ_RATIO = "basic_info/sp.domain_split_freq_ratio";
my $SP_CLUSTER_NUM = "basic_info/sp.cluster_num";
my $SP_PARALOG_FREQ = "basic_info/sp.paralog_freq";
my $SP_PARALOG_FREQ_RATIO = "basic_info/sp.paralog_freq_ratio";
my $SP_GENE_DUPLI_FREQ_RATIO = "basic_info/sp.gene_dupli_freq_ratio";
my $SP_DOMAIN_DUPLI_FREQ_RATIO = "basic_info/sp.domain_dupli_freq_ratio";
exec_and_save("dclst2tsv -a $INPUT", $CLUSTER_DESCR);
exec_and_save("cat $CLUSTER | cut 1 | freq -s", $CLUSTER_SIZE);
exec_and_save("cat $CLUSTER | cut 1 : | sort | uniq", "basic_info/cluster.sp");
exec_and_save("cat $CLUSTER | cut 1 : | sort | uniq | cut 1 | freq -s", $CLUSTER_SP_NUM);
exec_and_save("cat $CLUSTER | cut 1,2 | sort | uniq | cut 1 | freq -s", $CLUSTER_GENE_NUM);
exec_and_save("table_subtract $CLUSTER_SIZE $CLUSTER_SP_NUM", $CLUSTER_PARALOG_NUM);
exec_and_save("cat $CLUSTER | cut 2 | cut 1 : | sort | uniq", $SP);
exec_and_save("cat $CLUSTER | cut 2 | sort | uniq | cut 1 : | freq", $GENE_NUM);
exec_and_save("cat $CLUSTER | grep -v ' 0 ' | cut 2 | sort | uniq | cut 1 : | freq | freq2ratio -f -0 $GENE_NUM", $SP_SPLIT_GENE);
exec_and_save("cat $CLUSTER | cut 2 | cut 1 : | freq", $DOMAIN_FREQ);
exec_and_save("cat $DOMAIN_FREQ | freq2ratio -f -1 $GENE_NUM", $DOMAIN_SPLIT_FREQ_RATIO);
exec_and_save("cat $CLUSTER | cut 1 : | sort | uniq | cut 2 | freq", $SP_CLUSTER_NUM);
exec_and_save("table_subtract $DOMAIN_FREQ $SP_CLUSTER_NUM", $SP_PARALOG_FREQ);
exec_and_save("cat $SP_PARALOG_FREQ | freq2ratio -r -f $DOMAIN_FREQ", $SP_PARALOG_FREQ_RATIO);
exec_and_save("cat $CLUSTER | cluster.duplicated_genes", $SP_GENE_DUPLI_FREQ_RATIO);
exec_and_save("cat $SP_PARALOG_FREQ | freq2ratio $SP_CLUSTER_NUM", $SP_DOMAIN_DUPLI_FREQ_RATIO);
my $CLUSTER_FUNCTIONS = "basic_info/cluster.functions";
my $FUNC_STATUS_DIR = "basic_info/func_status";
my $SP_FUNCTIONS_FREQ = "basic_info/sp.functions.freq";
my $SP_FUNCTIONS_RATIO = "basic_info/sp.functions.ratio";
if ($INPUT =~ /\.dclst$/) {
    exec_and_save("dclst2func $INPUT", $CLUSTER_FUNCTIONS);
    (! -s "$FUNC_STATUS_DIR/MBGD" || ! -s "$FUNC_STATUS_DIR/COG" || ! -s "$FUNC_STATUS_DIR/KEGG" || ! -s "$FUNC_STATUS_DIR/TIGR") and 
        exec_command("table_summary $CLUSTER_SIZE $CLUSTER_SP_NUM $CLUSTER_FUNCTIONS | cluster_func_status -o $FUNC_STATUS_DIR");
    exec_and_save("cat cluster | cluster.func_freq $CLUSTER_FUNCTIONS", $SP_FUNCTIONS_FREQ);
    exec_and_save("cat cluster | cluster.func_freq -r $GENE_NUM $CLUSTER_FUNCTIONS", $SP_FUNCTIONS_RATIO);
}

### Additional  information
print_log("Additional information");
mkdir_with_check("additional_info");

my $SP_NAME = "additional_info/sp.name";
my $SP_TAXID = "additional_info/sp.taxid";
my $TAXID_ORDER = "additional_info/taxid.order";
my $SP_ORDER = "additional_info/sp.order";
my $SP_TAXID_ANCESTORS = "additional_info/sp.taxid.ancestors";
my $TAXID_NODE_DIR = "additional_info/taxid_nodes";
mkdir_with_check($TAXID_NODE_DIR);
my $TAXID_NODE_NAMES = "$TAXID_NODE_DIR/taxid_node.names";
my $TAXID_NODE_ANCESTOR_NAMES = "$TAXID_NODE_DIR/taxid_node.ancestor_names";
my $TAXID_NODE_PARENTS = "$TAXID_NODE_DIR/taxid_node.parents";
my $TAXID_NODE_DESCENDENTS = "$TAXID_NODE_DIR/taxid_node.descendents";
exec_and_save("cat $SP | org2descr", $SP_NAME);
exec_and_save("cat $SP | org2taxid", $SP_TAXID);
exec_and_save("cat /db/project/MBGD/etc/taxon.tab | cut -f1,7,8 | uniq", $TAXID_ORDER);
exec_and_save("cat $SP_TAXID | table -k 2 $TAXID_ORDER | sort -k4,4n | cut -f1,3", $SP_ORDER);
(! -s $TAXID_NODE_NAMES || ! -s $SP_TAXID_ANCESTORS) and exec_command("cat $SP | org2taxid_ancestors -o $TAXID_NODE_NAMES > $SP_TAXID_ANCESTORS");
# exec_and_save("cat $TAXID_NODE_NAMES | cut -f1 | tax2ancestor_names", $TAXID_NODE_ANCESTOR_NAMES); # This fails, why ?
exec_and_save("cat $TAXID_NODE_NAMES | cut -f1 | tax2parent", $TAXID_NODE_PARENTS);
exec_and_save("cat $SP_TAXID_ANCESTORS | taxid_ancestors2descendants", $TAXID_NODE_DESCENDENTS);

my $TAXON_DIR = "additional_info/sp.taxon";
mkdir_with_check($TAXON_DIR);
my @TAXON_NAME_FILE = ();
for my $rank (@TAXON_RANK) {
    exec_and_save("cat $SP | org2taxname $rank", "$TAXON_DIR/$rank");
    push @TAXON_NAME_FILE, "$TAXON_DIR/$rank";
}

my $TAXON_SUMMARY = "additional_info/sp.taxon_summary";
if (! -s $TAXON_SUMMARY) {
    my $taxname_sort_command = "sort";
    for (my $i=2; $i<=7; $i++) {
        $taxname_sort_command .= " -k$i,$i";
    }
    exec_and_save("table_summary $SP @TAXON_NAME_FILE $SP_NAME | $taxname_sort_command", $TAXON_SUMMARY);
}

my $CLUSTER_PROK_EUK = "additional_info/cluster.prok_euk";
exec_and_save("cat $CLUSTER | cluster.prok_euk $TAXON_SUMMARY", $CLUSTER_PROK_EUK);

if ($INPUT =~ /\.dclst$/) {
    my $func_num_dir = "additional_info/cluster_num.func_cat";
    mkdir_with_check($func_num_dir);
    ! (-s "$func_num_dir/MBGD" || -s "$func_num_dir/COG" || -s "$func_num_dir/KEGG" || -s "$func_num_dir/TIGR") and 
        exec_command("cat $CLUSTER_FUNCTIONS | cluster_num.func_cat -k $CLUSTER_PROK_EUK $func_num_dir");
}

### Domain fusion network
print_log("Domain fusion network");

# my $FILTER = "grep FUSION |";
my $FILTER = "";

mkdir_with_check("network");

my $LINK_ANCESTOR = "network/link.ancestor";
my $LINK_ANCESTOR_SIGNIFICANT = "network/link.ancestor.significant";
my $LINK_ANCESTOR_SIGNIFICANT_FREQ = "network/link.ancestor.significant.freq";
my $LINK_ANCESTOR_SIGNIFICANT_ANNOT = "network/link.ancestor.significant.annot";
my $LINK_ANCESTOR_SIGNIFICANT_ANNOT_FREQ = "network/link.ancestor.significant.annot.freq";
my $LINK_ALL_PROK_EUK = "network/link.all.prok_euk";
my $SP_FUSION_RATE = "network/sp.fusion_rate";
my $SP_FISSION_RATE = "network/sp.fission_rate";
my $TAXID_NODE_FUSION_RATE_MEAN = "network/taxid_node.fusion_rate_mean";
my $TAXID_NODE_FUSION_RATE_MEAN_SUMMARY = "network/taxid_node.fusion_rate_mean.summary";
my $TAXID_NODE_PARALOG_RATE_MEAN = "network/taxid_node.paralog_rate_mean";
my $TAXID_NODE_PARALOG_RATE_MEAN_SUMMARY = "network/taxid_node.paralog_rate_mean.summary";
my $TAXID_NODE_GENE_NUM_MEAN = "network/taxid_node.gene_num_mean";
my $TAXID_NODE_GENE_NUM_MEAN_SUMMARY = "network/taxid_node.gene_num_mean.summary";
my $TAXID_NODE_GENE_PARALOG_FUSION = "network/taxid_node.gene_paralog_fusion";
my $CLUSTER_DEGREE = "network/cluster.degree";
my $CLUSTER_DEGREE_FREQ = "network/cluster.degree.freq";
my $LINK_UNDER_DEGREE_TXT = "network/link.degree6.txt";
my $NODE_UNDER_DEGREE_TXT = "network/node.degree6.txt";
exec_and_save("cat $CLUSTER | domnet_link_info -s $CLUSTER_SIZE -f $CLUSTER_FUNCTIONS -u -R", "network/link.all"); # IMPORTANT
exec_and_save("cat network/link.all | link.ancestor", $LINK_ANCESTOR);
exec_and_save("cat $LINK_ANCESTOR | link.filter_by_coverage 0.5 | sort -t '\t' -k4,4 -k2,2gr -k6,6gr", $LINK_ANCESTOR_SIGNIFICANT);
exec_and_save("cat $LINK_ANCESTOR_SIGNIFICANT | cut -f4,5 | freq -s", $LINK_ANCESTOR_SIGNIFICANT_FREQ);
exec_and_save("cat $LINK_ANCESTOR_SIGNIFICANT | link.annot $CLUSTER_DESCR", $LINK_ANCESTOR_SIGNIFICANT_ANNOT);
exec_and_save("cat $LINK_ANCESTOR_SIGNIFICANT_ANNOT | link.annot.freq", $LINK_ANCESTOR_SIGNIFICANT_ANNOT_FREQ);
exec_and_save("cat network/link.all | link.prok_euk $TAXON_DIR/Superkingdom", $LINK_ALL_PROK_EUK);
exec_and_save("cat network/link.all | $FILTER cut -f5 | perl -pe 's/,/\\n/g' | freq | freq2ratio -f -0 $SP_CLUSTER_NUM", $SP_FUSION_RATE);
exec_and_save("cat network/link.all | grep FISSION | cut -f6 | grep . | perl -pe 's/,/\\n/g' | freq | freq2ratio -f -0 $SP_CLUSTER_NUM", $SP_FISSION_RATE);
! (-s "network/link.prok" || -s "network/link.euk" || -s "network/link.prok_euk") and exec_command("cluster_link_prok_euk -k $CLUSTER_PROK_EUK network");

exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS -v 3 $SP_FUSION_RATE", $TAXID_NODE_FUSION_RATE_MEAN); # IMPORTANT
exec_and_save("table_summary $TAXID_NODE_FUSION_RATE_MEAN $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS", $TAXID_NODE_FUSION_RATE_MEAN_SUMMARY);
append_header($TAXID_NODE_FUSION_RATE_MEAN_SUMMARY, "${TAXID_NODE_FUSION_RATE_MEAN_SUMMARY}.txt", "taxid", "avg fusion_rate", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS -v 4 $SP_PARALOG_FREQ_RATIO", $TAXID_NODE_PARALOG_RATE_MEAN);
exec_and_save("table_summary $TAXID_NODE_PARALOG_RATE_MEAN $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS", $TAXID_NODE_PARALOG_RATE_MEAN_SUMMARY);
append_header($TAXID_NODE_PARALOG_RATE_MEAN_SUMMARY, "${TAXID_NODE_PARALOG_RATE_MEAN_SUMMARY}.txt", "taxid", "avg paralog_rate", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS $GENE_NUM", $TAXID_NODE_GENE_NUM_MEAN);
exec_and_save("table_summary $TAXID_NODE_GENE_NUM_MEAN $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS", $TAXID_NODE_GENE_NUM_MEAN_SUMMARY);
append_header($TAXID_NODE_GENE_NUM_MEAN_SUMMARY, "${TAXID_NODE_GENE_NUM_MEAN_SUMMARY}.txt", "taxid", "avg gene_num", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

exec_and_save("cat network/link.all | link.degree.sp basic_info/cluster.sp", "network/sp.degree");
exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS -v 3 network/sp.degree", "network/taxid_node.degree_mean");
exec_and_save("table_summary network/taxid_node.degree_mean $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS",  "network/taxid_node.degree_mean.summary");
append_header("network/taxid_node.degree_mean.summary", "network/taxid_node.degree_mean.summary.txt", "taxid", "avg degree", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

exec_and_save("cat network/link.all | link.degree", $CLUSTER_DEGREE);
exec_and_save("cat $CLUSTER_DEGREE | cut 2 | freq | sort -k1,1n", $CLUSTER_DEGREE_FREQ);
exec_and_save("cat network/link.all | link.break_hubs -d 6 -t $TAXON_DIR/Superkingdom $CLUSTER_DEGREE", $LINK_UNDER_DEGREE_TXT);
exec_and_save("cat $LINK_UNDER_DEGREE_TXT | network.node_attr -T -N $CLUSTER_SP_NUM -K $CLUSTER_PROK_EUK -F $CLUSTER_FUNCTIONS -D $CLUSTER_DESCR", $NODE_UNDER_DEGREE_TXT);

exec_and_save("paste $TAXID_NODE_GENE_NUM_MEAN $TAXID_NODE_PARALOG_RATE_MEAN $TAXID_NODE_FUSION_RATE_MEAN | cut -f1,4,10,16", $TAXID_NODE_GENE_PARALOG_FUSION);

if ($INPUT =~ /\.dclst$/) {
    my $func_anal_dir = "network/func_analysis";
    mkdir_with_check($func_anal_dir);
    my $func_num_dir = "additional_info/cluster_num.func_cat";
    for my $cat (@FUNCTION_CATEGORY) {
        fusion_func_anal($cat, "network/link.all", "$FUNC_STATUS_DIR/$cat", "$func_num_dir/$cat", 2, $func_anal_dir, "link.all.$cat");
        fusion_func_anal($cat, "network/link.prok", "$FUNC_STATUS_DIR/$cat", "$func_num_dir/$cat", 3, $func_anal_dir, "link.prok.$cat");
        fusion_func_anal($cat, "network/link.euk", "$FUNC_STATUS_DIR/$cat", "$func_num_dir/$cat", 4, $func_anal_dir, "link.euk.$cat");
        fusion_func_anal($cat, "network/link.prok_euk", "$FUNC_STATUS_DIR/$cat", "$func_num_dir/$cat", 5, $func_anal_dir, "link.prok_euk.$cat");
        exec_and_save("cat network/link.all | $FILTER grep ${cat}_SAME_EXACTLY | cut -f5 | perl -pe 's/,/\\n/g' | freq | freq2ratio -0 $SP_FUSION_RATE", "network/sp.same_func.$cat");
    }
}

# files for cytoscape
exec_and_save("cat network/link.all | link.for_cytoscape -T network/link.ancestor.significant -t additional_info/sp.taxon/Superkingdom network/cluster.degree", "network/link.significant.cytoscape");
exec_and_save("cat network/link.significant.cytoscape | network.node_attr -T -N basic_info/cluster.sp_num -K additional_info/cluster.prok_euk -F basic_info/cluster.functions -D basic_info/cluster.descr", "network/node.significant.cytoscape");

### sub-network for each taxon
exec_and_save('cat additional_info/sp.taxid | table basic_info/sp.gene_num', 'network/sp_taxid_genenum');
exec_and_save('cat additional_info/taxid_nodes/taxid_node.descendents | cut 2 | perl -lane "print scalar(split(\',\', $_))"', 'network/taxid_node.descendents_num');
mkdir_with_check('network/filter/node_edge');
exec_and_save("cat network/link.all | degree_for_each_taxon_node_edge basic_info/cluster.sp additional_info/taxid_nodes/taxid_node.descendents", "network/filter/node_edge/taxid_node_edge.degree");
exec_and_save("cat network/filter/node_edge/taxid_node_edge.degree | degree_dist", "network/filter/node_edge/taxid_node_edge.degree_dist");
if (! -e 'network/filter/node_edge/dist.density') {
    exec_command("domnet_dist_density -d network/filter/node_edge/dist.density network/filter/node_edge/taxid_node_edge.degree");
}
if (! -e 'network/filter/node_edge/dist.gradient') {
    mkdir_with_check('network/filter/node_edge/dist.gradient');
    exec_command('for i in $(cat network/filter/node_edge/taxid_node_edge.degree | cut 1); do cat network/filter/node_edge/dist.density/$i.* | domnet_plot_gradient.R -xy | sed -n 2p > network/filter/node_edge/dist.gradient/$i; done');
}
exec_and_save('grep . network/filter/node_edge/dist.gradient/* | grep_gradient.pl | sed "s/	/z/" | sort | sed "s/z/	/"', 'network/filter/node_edge/dist.gradients');
exec_and_save('cat additional_info/sp.taxid | table -k 2 network/filter/node_edge/dist.gradients | grep -v NOT_FOUND', 'network/filter/node_edge/sp_taxid_gradient');
exec_and_save('cat additional_info/sp.taxon_summary | table basic_info/sp.gene_num | table network/filter/node_edge/sp_taxid_gradient', 'network/filter/node_edge/sp_taxid_gradient.summary.tsv');
!-s 'network/filter/node_edge/taxid_node_edge.degree.powerlaw' and exec_command('cat network/filter/node_edge/taxid_node_edge.degree | fit_powerlaw.py -o network/filter/node_edge/taxid_node_edge.degree.powerlaw 2> network/filter/node_edge/taxid_node_edge.degree.powerlaw.err');
# exec_and_save('cat additional_info/sp.taxid | table basic_info/sp.gene_num | table -k 2 network/filter/node_edge/taxid_node_edge.degree.powerlaw', 'network/filter/node_edge/taxid_node_edge.degree.powerlaw.genenum');
exec_and_save('cat additional_info/sp.taxid | table -k 2 network/filter/node_edge/taxid_node_edge.degree.powerlaw | table basic_info/sp.gene_num', 'network/filter/node_edge/taxid_node_edge.degree.powerlaw.genenum~');
exec_and_save('cat network/sp_taxid_genenum | cut -f2- | table network/filter/node_edge/taxid_node_edge.degree.powerlaw | cut -f2,5', 'network/filter/node_edge/genenum_a');
exec_and_save('paste network/taxid_node.descendents_num network/filter/node_edge/taxid_node_edge.degree.powerlaw | cut -f1,3', 'network/filter/node_edge/num_R');
exec_and_save('paste network/taxid_node.descendents_num network/filter/node_edge/taxid_node_edge.degree.powerlaw | cut -f1,4', 'network/filter/node_edge/num_P');
exec_and_save('paste network/taxid_node.descendents_num network/filter/node_edge/taxid_node_edge.degree.powerlaw | cut -f1,5', 'network/filter/node_edge/num_a');
exec_and_save('cat network/filter/node_edge/sp_taxid_gradient | table basic_info/sp.gene_num | table additional_info/sp.taxon_summary | cut -f 3,4 | grep -v NOT_FOUND', 'network/filter/node_edge/gradient_genenum');

mkdir_with_check('network/filter/node');
exec_and_save("cat network/link.all | degree_for_each_taxon basic_info/cluster.sp additional_info/taxid_nodes/taxid_node.descendents", "network/filter/node/taxid_node.degree");
exec_and_save("cat network/filter/node/taxid_node.degree | degree_dist", "network/filter/node/taxid_node.degree_dist");
if (! -e 'network/filter/node/dist.density') {
    exec_command("domnet_dist_density -d network/filter/node/dist.density network/filter/node/taxid_node.degree");
}
if (! -e 'network/filter/node/dist.gradient') {
    mkdir_with_check('network/filter/node/dist.gradient');
    exec_command('for i in $(cat network/filter/node/taxid_node.degree | cut 1); do cat network/filter/node/dist.density/$i.* | domnet_plot_gradient.R -xy | sed -n 2p > network/filter/node/dist.gradient/$i; done');
}
exec_and_save('grep . network/filter/node/dist.gradient/* | grep_gradient.pl', 'network/filter/node/dist.gradients');
exec_and_save('cat additional_info/sp.taxid | table -k 2 network/filter/node/dist.gradients | grep -v NOT_FOUND', 'network/filter/node/sp_taxid_gradient');
exec_and_save('cat additional_info/sp.taxon_summary | table basic_info/sp.gene_num | table network/filter/node/sp_taxid_gradient', 'network/filter/node/sp_taxid_gradient.summary.tsv');
!-s 'network/filter/node/taxid_node.degree.powerlaw' and exec_command('cat network/filter/node/taxid_node.degree | fit_powerlaw.py -o network/filter/node/taxid_node.degree.powerlaw');
exec_and_save('cat additional_info/sp.taxid | table basic_info/sp.gene_num | table -k 2 network/filter/node/taxid_node.degree.powerlaw', 'network/filter/node/taxid_node.degree.powerlaw.genenum');
exec_and_save('cat network/sp_taxid_genenum | cut -f2- | table network/filter/node/taxid_node.degree.powerlaw | cut -f2,5', 'network/filter/node/node.genenum_a');

exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS -v 3 network/filter/node/sp_taxid_gradient", "network/filter/node/taxid_gradient_mean");
exec_and_save("table_summary network/filter/node/taxid_gradient_mean $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS", "network/filter/node/taxid_gradient_mean.summary");
append_header("network/filter/node/taxid_gradient_mean.summary", "network/filter/node/taxid_gradient_mean.summary.txt", "taxid", "avg gradient", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

exec_and_save("mean_for_each_taxon -p $TAXID_NODE_PARENTS -d $TAXID_NODE_DESCENDENTS -v 3 network/filter/node_edge/sp_taxid_gradient", "network/filter/node_edge/taxid_gradient_mean");
exec_and_save("table_summary network/filter/node_edge/taxid_gradient_mean $TAXID_NODE_NAMES $TAXID_NODE_DESCENDENTS", "network/filter/node_edge/taxid_gradient_mean.summary");
append_header("network/filter/node_edge/taxid_gradient_mean.summary", "network/filter/node_edge/taxid_gradient_mean.summary.txt", "taxid", "avg gradient", "p-value (vs siter taxa)", "log ratio (vs siter taxa)", "p-value (vs all others)", "log ratio (vs all others)");

### Summary
print_log("Summary");
my $SP_FUSION_SUMMARY = "sp.domfusion_summary";
my @HEADER = ();
my @COG_FUNCTIONS = ("COG1.1", "COG1.2", "COG1.3", "COG1.4", "COG1.5", "COG1.6", "COG1.7", "COG1.8", "COG2.1", "COG2.2", "COG2.3", "COG2.4", "COG2.5"
		     , "COG3.1", "COG3.2", "COG3.3", "COG3.4", "COG3.5", "COG3.6", "COG3.7", "COG3.8", "COG3.9", "COG3.10", "COG3.11", "COG4.1", "COG4.2", "others");
if (! -s $SP_FUSION_SUMMARY) {
    @HEADER = ("sp", "hierarchy", @TAXON_RANK, "species", 
               "#genes", "#genes_split", "#genes_split/#genes", "#domains-#genes", "#domains/#genes-1", "#domains", "#paralogs", "#paralogs/#domains", 
               "#fusions", "#fusions/#clusters", "#fission", "#fission/#clusters", "#unduplicated_genes", "#duplicated_genes", "#duplicated/#genes", "#paralogs/#clusters"
               , @COG_FUNCTIONS, @COG_FUNCTIONS);
    my @files = ($SP_ORDER, $TAXON_SUMMARY, $GENE_NUM, $SP_SPLIT_GENE, $DOMAIN_SPLIT_FREQ_RATIO, $SP_PARALOG_FREQ_RATIO, $SP_FUSION_RATE, $SP_FISSION_RATE
                 , $SP_GENE_DUPLI_FREQ_RATIO, $SP_DOMAIN_DUPLI_FREQ_RATIO
                 , $SP_FUNCTIONS_FREQ, $SP_FUNCTIONS_RATIO);
    if ($INPUT =~ /\.dclst$/) {
        push @HEADER, ("same MBGD fusion", "same COG fusion", "same KEGG fusion", "same TIGR fusion");
        push @files, ("network/sp.same_func.MBGD", "network/sp.same_func.COG", "network/sp.same_func.KEGG", "network/sp.same_func.TIGR");
    }
    exec_and_save("table_summary @files", $SP_FUSION_SUMMARY);
}
append_header($SP_FUSION_SUMMARY, "${SP_FUSION_SUMMARY}.txt", @HEADER);

my $CLUSTER_SUMMARY = "network/cluster.summary";
exec_and_save("table_summary -N 0 $CLUSTER_SIZE $CLUSTER_SP_NUM $CLUSTER_PARALOG_NUM $CLUSTER_DEGREE $CLUSTER_DESCR $CLUSTER_FUNCTIONS", $CLUSTER_SUMMARY);
append_header($CLUSTER_SUMMARY, "${CLUSTER_SUMMARY}.txt", "cluster", "#domains", "#sp", "#paralogs", "degree", "description", "MBGD func", "COG func", "KEGG func", "TIGR func");

my $CLUSTER_SUMMARY_COG_TXT = "network/cluster.summary.COG.txt";
exec_and_save("cat ${CLUSTER_SUMMARY}.txt | cut -f1-6,8 | perl -lane '\$F[4] and print' | table -k7 network/func_analysis.txt/link.all.COG.txt", $CLUSTER_SUMMARY_COG_TXT);

### Figures
print_log("Figures");
my $FIGURE_DIR = "figure";
mkdir_with_check($FIGURE_DIR);
chdir $FIGURE_DIR || die;
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 10 14 genes split");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 10 15 genes clusters");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 10 17 genes paralogs");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 10 19 genes fusions");
exec_plot("domnet_plot_multi -p sp_multi ../$SP_FUSION_SUMMARY 10 19 genes fusions"); # important?
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 10 21 genes fissions");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 12 17 splitGenes paralogs");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 12 19 splitGenes fusions");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 14 17 splits paralogs");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 14 19 splits fusions");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 17 19 paralogs fusions"); # important?
exec_plot("domnet_plot_multi -p sp_multi ../$SP_FUSION_SUMMARY 17 19 paralogs fusions"); # important?
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 19 21 fusions fissions");
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 19 24 fusions duplications"); # important?
exec_plot("domnet_plot -p sp ../$SP_FUSION_SUMMARY 19 25 fusions dupliDomains"); # important?

exec_plot("domnet_plot -p cluster -xy ../$CLUSTER_SUMMARY 2 5 domains degree");
exec_plot("domnet_plot -p cluster -xy ../$CLUSTER_SUMMARY 2 3 domains paralogs");
exec_plot("domnet_plot -p cluster -xy ../$CLUSTER_SUMMARY 3 5 species degree");
exec_plot("domnet_plot -p cluster -xy ../$CLUSTER_SUMMARY 4 5 paralogs degree");

exec_plot("domnet_plot -p tax ../$TAXID_NODE_GENE_PARALOG_FUSION 2 3 genes paralogs");
exec_plot("domnet_plot -p tax ../$TAXID_NODE_GENE_PARALOG_FUSION 2 4 genes fusions");
exec_plot("domnet_plot -p tax ../$TAXID_NODE_GENE_PARALOG_FUSION 3 4 paralogs fusions");
for my $cat (@FUNCTION_CATEGORY) {
    exec_plot("domnet_plot -p $cat ../network/func_analysis/link.all.$cat 4 5 domains species");
    exec_plot("domnet_plot -p $cat ../network/func_analysis/link.all.$cat 4 8 domains fusinos");
    exec_plot("domnet_plot -p $cat ../network/func_analysis/link.all.$cat 5 8 species fusinos");
    exec_plot("domnet_plot -p $cat ../network/func_analysis/link.all.$cat 6 8 paralogs fusions");
}

exec_plot("domnet_plot -l -xy ../$CLUSTER_DEGREE_FREQ 1 2 degree frequency");

chdir "..";

### Taxonomy tree figure
print_log("Taxonomy tree figure");
my $TAXON_ANCESTORS_FIG = "domfusion_tax_tree.png";
! -s $TAXON_ANCESTORS_FIG and exec_command("cat $SP_FUSION_SUMMARY | cut -f1,19 | domfusion_tax_tree -t $SP_TAXID_ANCESTORS -n $TAXID_NODE_NAMES");

################################################################################
### Functions ##################################################################
################################################################################
sub fusion_func_anal {
    my ($cat, $link_file, $func_status_file, $ref_file, $ref_col, $func_anal_dir, $out_file) = @_;

    my $func_col;
    if ($cat eq "MBGD") {
        $func_col = 7;
    } elsif ($cat eq "COG") {
        $func_col = 9;
    } elsif ($cat eq "KEGG") {
        $func_col = 11;
    } elsif ($cat eq "TIGR") {
        $func_col = 13;
    } else {
        die;
    }

    exec_and_save("cat $link_file | $FILTER cut -f1,$func_col | fusion_func_anal -c $cat -p $func_status_file -r $ref_file -n $ref_col", "$func_anal_dir/$out_file");
    mkdir_with_check("$func_anal_dir.txt");
    if (! -s "${func_anal_dir}.txt/${out_file}.txt") {
        my @header = ("$cat func", "description", "#clusters", 
                      "#domains_avg", "#sp_avg", "#paralogs_avg",
                      "#fusions", "average number of fusions",
                      "#same_func", "ratio of same func", "#unknown_func", "ratio of unknown func", "#different_func", "ratio of different func", 
                      "different func", "description", "#different_func", "ratio of different func");
        append_header("$func_anal_dir/$out_file", "${func_anal_dir}.txt/${out_file}.txt", @header);
    }
}

sub append_header {
    my ($in_file, $out_file, @header) = @_;

    if (! -s $out_file) {
        my $header = join("\t", @header);
        system "echo '$header' > $out_file";
        exec_command("cat $in_file >> $out_file");
    }
}

sub mkdir_with_check {
    my ($file_or_dir) = @_;

    system "mkdir -p $file_or_dir";
}

sub exec_command {
    my ($command) = @_;

    print "\$ $command\n";
    system "$command";
}

sub exec_plot {
    my ($command) = @_;

    system "$command";
}

sub exec_and_save {
    my ($command, $out_file, $force_output) = @_;

    if (! $force_output and -s $out_file) {
        return;
    }

    if ($OPT{v}) {
        print "\$ $command > $out_file\n";
    } else {
        print "Creating $out_file\n";
    }
    system "$command > $out_file";

    if (! -s $out_file) {
        print "$out_file is empty.\n";
        exit(1);
    }
}

sub print_log {
    my ($comment) = @_;
    print "\n";
    print "# $comment\n";
    print "\n";
}
