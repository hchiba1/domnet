#!/usr/bin/perl -w
use strict;
use File::Basename;
use Getopt::Std;
my $PROGRAM = basename $0;
my $USAGE=
"Usage: $PROGRAM
";

my %OPT;
getopts('', \%OPT);

### Read ###
my %MATRIX = ();
my %TOTAL = ();
my $TOTAL_SUM = 0;

!@ARGV && -t and die $USAGE;
while (<>) {
    chomp;
    unless (/^\S+$/) {
	die;
    }

    my @func = split(",", $_);
    for my $func (@func) {
	$TOTAL{$func} ++;
    }

    for (my $i=0; $i<@func; $i++) {
	for (my $j=0; $j<@func; $j++) {
	    if ($func[$i] ne $func[$j]) {
		$MATRIX{$func[$i]}{$func[$j]} ++;
	    }
	}
    }
    $TOTAL_SUM ++;
}

### Header ###
# my @FUNC = sort {$a <=> $b} keys %TOTAL;
my @FUNC = ("1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8", "2.1", "2.2", "2.3", "2.4", "2.5", "3.1", "3.2", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "4.1", "4.2");
print "\t", join("\t", @FUNC, "multi", "ratio", "n", "r"), "\n";

### Matrix ###
for (my $i=0; $i<@FUNC; $i++) {
    print "$FUNC[$i]";
    my $multi = 0;
    for (my $j=0; $j<@FUNC; $j++) {
	if ($MATRIX{$FUNC[$i]}{$FUNC[$j]}) {
	    print "\t", $MATRIX{$FUNC[$i]}{$FUNC[$j]};
	    $multi += $MATRIX{$FUNC[$i]}{$FUNC[$j]};
	} else {
	    # print "\t0";
	    print "\t";
	}
    }
    print "\t", $multi;
    if ($TOTAL{$FUNC[$i]}) {
	print "\t"; printf("%.1f", $multi / $TOTAL{$FUNC[$i]} * 100);
	print "\t", $TOTAL{$FUNC[$i]};
    } else {
	print "\t";
	print "\t", "0";
    }
    print "\t"; printf("%.1f", $TOTAL{$FUNC[$i]} / $TOTAL_SUM * 100);
    print "\n";
}
